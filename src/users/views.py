from django.conf import settings
from django.contrib import messages
from django.contrib.auth import authenticate, get_user_model, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import update_last_login
from django.contrib.auth.password_validation import validate_password
from django.contrib.auth.tokens import default_token_generator
from django.core.mail import send_mail
from django.shortcuts import render, redirect
from django.urls import reverse
from django.utils.encoding import force_bytes, force_str
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from smtplib import SMTPDataError
import logging

from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import generics, status, permissions, serializers
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

from .models import CustomUser
from .serializers import RegisterSerializer, LoginSerializer

logger = logging.getLogger(__name__)

User = get_user_model()

# üåê HTML –°–¢–û–†–Ü–ù–ö–ò

def register_page(request):
    return render(request, "register.html")

def registration_success_view(request):
    return render(request, "registration_success.html")

def login_page(request):
    if request.method == "POST":
        username = request.POST.get("username")
        password = request.POST.get("password")

        user = authenticate(username=username, password=password)

        if user is not None:
            login(request, user)
            messages.success(request, "–í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –¥–æ —Å–∏—Å—Ç–µ–º–∏!")
            return redirect("home")
        else:
            messages.error(request, "–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.")

    return render(request, "login.html")

def password_reset_request(request):
    if request.method == "POST":
        email = request.POST.get("email")

        if not email:
            messages.error(request, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.") # —Ü–µ–π —Ç–µ–∫—Å—Ç –Ω–µ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è, –≤–∏–ø–∞–¥–∞—î –∞–Ω–≥–ª.
            return redirect("users:password_reset_form")

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            messages.error(request, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.") #–ø—Ä–∞—Ü—é—î
            return redirect("users:password_reset_form")

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        token = default_token_generator.make_token(user)
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        reset_link = request.build_absolute_uri(
            reverse('users:password_reset_confirm', kwargs={'uidb64': uid, 'token': token})
        )

        # –¢–µ–∫—Å—Ç –ª–∏—Å—Ç–∞
        email_body = (
            f'–í—ñ—Ç–∞—î–º–æ!\n\n'
            f'–í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞.\n'
            f'–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{reset_link}\n\n'
            f'–Ø–∫—â–æ –≤–∏ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ —Ü–µ–π –∑–∞–ø–∏—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.\n\n'
            f'–î—è–∫—É—î–º–æ!'
        )

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–∏—Å—Ç–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        try:
            send_mail(
                '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è',
                email_body,
                settings.DEFAULT_FROM_EMAIL,
                [email],
                fail_silently=False  # –ú—ñ–Ω—è—î–º–æ –Ω–∞ False, —â–æ–± –ª–æ–≤–∏—Ç–∏ –≤–∏–Ω—è—Ç–∫–∏
            )
            messages.success(request, "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.")
            return redirect("users:password_reset_sent")

        except SMTPDataError as e:
            if e.smtp_code == 550:
                logger.error(f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏: {e}")
                messages.error(request, "–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                return redirect("users:password_reset_form")
            else:
                logger.error(f"SMTP-–ø–æ–º–∏–ª–∫–∞: {e}")
                messages.error(request, "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                return redirect("users:password_reset_form")

        except Exception as e:
            logger.error(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ª–∏—Å—Ç–∞: {e}")
            messages.error(request, "–°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return redirect("users:password_reset_form")

    return render(request, "password_reset_form.html")

def password_reset_form_view(request):
    return render(request, "password_reset_form.html")

def password_reset_done_view(request):
    return render(request, "password_reset_done.html")

def password_reset_confirm_view(request, uidb64, token):
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except (User.DoesNotExist, ValueError, TypeError):
        user = None

    if request.method == "POST":
        new_password = request.POST.get("new_password")
        if user is not None and default_token_generator.check_token(user, token):
            user.set_password(new_password)
            user.save()
            messages.success(request, "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!")
            return redirect("users:password_reset_complete")
        else:
            messages.error(request, "–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return redirect("users:password_reset_confirm", uidb64=uidb64, token=token)

    return render(request, "password_reset_confirm.html")

def logout_view(request):
    logout(request)
    messages.success(request, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.")
    return redirect("users:login_page")

def password_reset_sent_view(request):
    return render(request, "password_reset_sent.html")


def password_reset_complete_view(request):
    return render(request, "password_reset_complete.html")

# üì• API Views

### üîπ –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø
class RegisterView(generics.CreateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = RegisterSerializer
    permission_classes = [AllowAny]

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if not serializer.is_valid():
            errors = serializer.errors
            error_messages = []
            
            if 'username' in errors:
                error_messages.append(f"–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {errors['username'][0]}")
            if 'email' in errors:
                error_messages.append(f"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {errors['email'][0]}")
            if 'password' in errors:
                error_messages.append(f"–ü–∞—Ä–æ–ª—å: {errors['password'][0]}")
            
            for msg in error_messages:
                messages.error(request, msg)
            
            return redirect('users:register_page')

        serializer.save()
        messages.success(request, "–í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ —Å–∏—Å—Ç–µ–º–∏, —â–æ–± —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º.")
        return redirect("users:registration_success")


### üîπ –õ–û–ì–Ü–ù
class LoginView(generics.GenericAPIView):
    serializer_class = LoginSerializer
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        return Response(serializer.validated_data, status=status.HTTP_200_OK)

### üîπ –ó–ú–Ü–ù–ê –ü–ê–†–û–õ–Ø
class ChangePasswordView(APIView):
    permission_classes = [IsAuthenticated]

    class InputSerializer(serializers.Serializer):
        old_password = serializers.CharField(write_only=True)
        new_password = serializers.CharField(write_only=True)

        def validate_new_password(self, value):
            validate_password(value)
            return value

    def put(self, request, *args, **kwargs):
        user = request.user
        serializer = self.InputSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        if not user.check_password(serializer.validated_data["old_password"]):
            return Response({"old_password": ["Wrong password."]}, status=400)

        user.set_password(serializer.validated_data["new_password"])
        user.save()

        return Response({"message": "Password updated successfully!"})

### üîπ –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ü–ê–†–û–õ–Ø (–ù–ê–î–°–ò–õ–ê–ù–ù–Ø EMAIL)


### üîπ –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ü–ê–†–û–õ–Ø (–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø)
class PasswordResetConfirmView(APIView):
    permission_classes = [AllowAny]

    class InputSerializer(serializers.Serializer):
        new_password = serializers.CharField(write_only=True)

        def validate_new_password(self, value):
            validate_password(value)
            return value

    def post(self, request, uidb64, token):
        try:
            uid = force_str(urlsafe_base64_decode(uidb64))
            user = User.objects.get(pk=uid)
        except (User.DoesNotExist, ValueError, TypeError):
            return Response({"error": "Invalid user"}, status=status.HTTP_400_BAD_REQUEST)

        if not default_token_generator.check_token(user, token):
            return Response({"error": "Invalid or expired token"}, status=status.HTTP_400_BAD_REQUEST)

        serializer = self.InputSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        user.set_password(serializer.validated_data["new_password"])
        user.save()
        return Response({"message": "Password has been reset successfully!"}, status=status.HTTP_200_OK)


# @login_required
# def upload_file(request):
#     if request.method == "POST":
#         form = UserFileForm(request.POST, request.FILES)
#         if form.is_valid():
#             user_file = form.save(commit=False)
#             user_file.user = request.user  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ —Ñ–∞–π–ª –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#             user_file.save()
#             return redirect("users:file_list")  # –ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤
#     else:
#         form = UserFileForm()

#     return render(request, "users/upload_file.html", {"form": form})

# @login_required
# def file_list(request):
#     files = UserFile.objects.filter(user=request.user)
#     return render(request, "users/file_list.html", {"files": files})
  
# #         return redirect("password_reset_complete")
